{"version":3,"sources":["../../src/components/ScrollSpyProvider.tsx","../../src/components/Section.tsx","../../src/components/Topic.tsx","components/Navbar.js","App.js","index.js"],"names":["ScrollSpyContext","React","ScrollSpyActions","ScrollSpyProvider","options","threshold","currentObserver","window","entries","entry","setNodes","nodes","n","isActive","current","state","sortedNodeTree","item","parentObj","obj","arr","actions","addNode","topic","id","instance","parentTopic","parent","value","Section","rest","context","Error","useScrollSpy","ref","Topic","inheritedTopic","childrenWithTopic","child","renderArr","map","node","key","style","display","fontWeight","color","href","title","Navbar","useScrollSpyState","className","Object","keys","Array","isArray","nestedTopic","some","ExampleContent","children","background","height","App","name","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84fb0566.chunk.js","sourcesContent":["import React from 'react'\n\nconst ScrollSpyContext = React.createContext<ScrollSpyState | undefined>(\n  undefined\n)\n\nconst ScrollSpyActions = React.createContext<ScrollSpyActions | undefined>(\n  undefined\n)\n\nexport default function ScrollSpyProvider({\n  children,\n  options = { threshold: 0.5 }\n}: ScrollSpyProviderProps) {\n  const [nodes, setNodes] = React.useState<ScrollItem[]>([])\n\n  // We want the IntersectionObserver inside a useRef because it will\n  // not trigger a rerender unlike useState\n  const { current: currentObserver } = React.useRef(\n    new window.IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // If the entry past the threshold, set it as the current node\n        if (entry.intersectionRatio > (options.threshold || 0.5)) {\n          // This may not work on older browsers, but pushState doesnt\n          // trigger a hashchange which would cause a jumping\n          window.history.pushState(null, '', `#${entry.target.id}`)\n\n          // Update node that is currently past the threshold\n          setNodes((nodes) =>\n            nodes.map((n) =>\n              n.id === entry.target.id\n                ? { ...n, isActive: true }\n                : { ...n, isActive: false }\n            )\n          )\n        }\n      })\n    }, options)\n  )\n\n  // We need to seperate the state from the actions because we dont want\n  // addNode to update everytime currentNode or nodes updates\n  const state = React.useMemo(\n    () => ({\n      nodes,\n      // This tree implementation is a little complex, but it consolidate repeated\n      // topics and supports up to 2 levels of depth\n      sortedNodeTree: nodes.reduce((obj: any, item) => {\n        if (item.parent) {\n          const parentObj = obj[item.parent] || {}\n          const arr = parentObj[item.topic || 'unsorted'] || []\n          return {\n            ...obj,\n            [item.parent]: {\n              ...parentObj,\n              [item.topic || 'unsorted']: [...arr, item]\n            }\n          }\n        } else {\n          const arr = obj[item.topic || 'unsorted'] || []\n          return {\n            ...obj,\n            [item.topic || 'unsorted']: [...arr, item]\n          }\n        }\n      }, {})\n    }),\n    [nodes]\n  )\n\n  // We memorize the state & actions to prevent occasional unnecessary rerenders\n  const actions = React.useMemo(\n    () => ({\n      // Because we can pass in a function as a 'ref' we can use this function\n      // to add the node to the observer 'tree'\n      addNode: (\n        instance: HTMLDivElement | null,\n        { title, parentTopic, topic }: ScrollSpyRef\n      ): void => {\n        if (instance) {\n          currentObserver.observe(instance)\n\n          setNodes((nodes) => [\n            ...nodes,\n            {\n              title,\n              id: instance.id,\n              isActive: false,\n              topic: parentTopic ? topic : undefined,\n              parent: !parentTopic ? topic : parentTopic\n            }\n          ])\n        }\n      }\n    }),\n    [currentObserver]\n  )\n\n  // Cleanup\n  React.useEffect(() => {\n    return () => currentObserver.disconnect()\n  }, [currentObserver])\n\n  return (\n    <ScrollSpyContext.Provider value={state}>\n      <ScrollSpyActions.Provider value={actions}>\n        {children}\n      </ScrollSpyActions.Provider>\n    </ScrollSpyContext.Provider>\n  )\n}\n\nexport const useScrollSpy = () => {\n  const context = React.useContext(ScrollSpyActions)\n  if (!context) {\n    throw new Error('useScrollSpy must be used within the ScrollSpyProvider')\n  }\n\n  return context.addNode\n}\n\nexport const useScrollSpyState = () => {\n  const context = React.useContext(ScrollSpyContext)\n  if (!context) {\n    throw new Error(\n      'useScrollSpyState must be used within the ScrollSpyProvider'\n    )\n  }\n\n  return context\n}\n","import React from 'react'\nimport { useScrollSpy } from './ScrollSpyProvider'\n\nexport default function Section({\n  children,\n  title,\n  id,\n  inheritedTopic,\n  parentTopic,\n  ...rest\n}: ScrollSpyTopicSectionProps) {\n  const addNode = useScrollSpy()\n\n  // Because the IntersectionObserver passes back a DOM node, not a\n  // react one, we need to forward the data-title to pick back up in state\n  return (\n    <div\n      id={id}\n      ref={(instance) =>\n        addNode(instance, {\n          title,\n          topic: inheritedTopic,\n          parentTopic: parentTopic\n        })\n      }\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Topic({\n  children,\n  name,\n  inheritedTopic\n}: ScrollSpyTopicProps) {\n  const childrenWithTopic = React.Children.map(children, (child) => {\n    if (!React.isValidElement<ScrollSpyTopicSectionProps>(child)) {\n      return child\n    }\n    return React.cloneElement(child, {\n      inheritedTopic: name,\n      parentTopic: inheritedTopic\n    })\n  })\n\n  return <div>{childrenWithTopic}</div>\n}\n","import React from 'react'\nimport { useScrollSpyState } from 'scroll-spy'\n\nfunction renderArr(arr) {\n  return arr.map((node) => {\n    return (\n      <li key={node.id}>\n        <a\n          style={{\n            display: 'block',\n            fontWeight: node.isActive ? 'bold' : 'normal',\n            color: node.isActive ? 'var(--color-fuchsia)' : '#5850ec'\n          }}\n          href={`#${node.id}`}\n        >\n          {node.title}\n        </a>\n      </li>\n    )\n  })\n}\n\n// This is a simple implementation of ScrollSpy\nexport default function Navbar() {\n  const { sortedNodeTree } = useScrollSpyState()\n\n  return (\n    <div className='navbar-container'>\n      <ul>\n        {Object.keys(sortedNodeTree).map((topic) => {\n          // This is all of the unsorted arrays, first layer of arrays\n          if (Array.isArray(sortedNodeTree[topic])) {\n            return renderArr(sortedNodeTree[topic])\n          } else {\n            // We then rendering the parent and topic\n            return (\n              <div key={topic}>\n                <h2>{topic}</h2>\n                {Object.keys(sortedNodeTree[topic]).map((nestedTopic) => {\n                  return (\n                    <ul key={nestedTopic}>\n                      {nestedTopic !== 'unsorted' && (\n                        <h3\n                          style={{\n                            fontWeight: sortedNodeTree[topic][nestedTopic].some(\n                              (n) => n.isActive\n                            )\n                              ? 'bold'\n                              : 'normal'\n                          }}\n                        >\n                          {nestedTopic}\n                        </h3>\n                      )}\n                      {renderArr(sortedNodeTree[topic][nestedTopic])}\n                    </ul>\n                  )\n                })}\n              </div>\n            )\n          }\n        })}\n      </ul>\n    </div>\n  )\n}\n","import React from 'react'\nimport { ScrollSpyProvider, Section, Topic } from 'scroll-spy'\nimport Navbar from './components/Navbar'\nimport './App.css'\n\nconst ExampleContent = ({ children, color }) => (\n  <div style={{ background: `var(--color-${color})`, height: '100vh' }}>\n    <h1>{children}</h1>\n  </div>\n)\n\nfunction App() {\n  return (\n    <ScrollSpyProvider>\n      <Navbar />\n      <Topic name='Introduction'>\n        <Section id='welcome' title='Welcome!'>\n          <ExampleContent color='purple'>Welcome!</ExampleContent>\n        </Section>\n        <Topic name='Prepare'>\n          <Section id='get-your-supplies' title='Get your supplies ready'>\n            <ExampleContent color='navy'>\n              Get your supplies ready\n            </ExampleContent>\n          </Section>\n          <Section id='watch-mars-base' title='Watch: Mars Base'>\n            <ExampleContent color='blue'>Watch this video</ExampleContent>\n          </Section>\n          <Section id='read-space-suits' title='Read space suits'>\n            <ExampleContent color='aqua'>Read space suits</ExampleContent>\n          </Section>\n        </Topic>\n        <Topic name='Design your repair kit'>\n          <Section id='gather-materials' title='Gather your materials'>\n            <ExampleContent color='teal'>Gather your materials</ExampleContent>\n          </Section>\n        </Topic>\n      </Topic>\n      <Section id='goodbye' title='Goodbye!'>\n        <ExampleContent color='red'>Byee!</ExampleContent>\n      </Section>\n    </ScrollSpyProvider>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}