{"version":3,"file":"index.modern.js","sources":["../src/components/utils.ts","../src/components/ScrollSpyProvider.tsx","../src/components/ScrollSpyComponent.tsx","../src/components/ScrollSpyTopic.tsx"],"sourcesContent":["export const getTitleFromAttributes = (\n  instance: HTMLDivElement | Element,\n): string => {\n  return instance.attributes.getNamedItem('data-title')!.value || 'Undefined'\n}\n\nexport const getTopicFromAttributes = (\n  instance: HTMLDivElement | Element,\n  attr = 'data-topic',\n): undefined | string => {\n  const attribute = instance.attributes.getNamedItem(attr)\n  if (attribute) {\n    return attribute.value\n  } else {\n    return undefined\n  }\n}\n","import React from 'react'\nimport { getTitleFromAttributes, getTopicFromAttributes } from './utils'\n\ninterface ScrollItem {\n  title: string\n  id: string\n  isActive: boolean\n  topic?: string\n  parent?: string\n}\n\ninterface Tree {\n  unsorted: ScrollItem[]\n  [key: string]: any\n}\n\ninterface ScrollSpyState {\n  addNode: (instance: HTMLDivElement | null) => void\n  nodes: ScrollItem[]\n  sortedNodeTree: Tree\n}\n\ninterface ScrollSpyProviderProps {\n  children?: React.ReactNode\n\n  // The threshold is a number from 0-1 indicating how much the child should be\n  // in view before becoming the current node\n  threshold?: number\n  options?: IntersectionObserverInit\n}\n\nconst ScrollSpyContext = React.createContext<ScrollSpyState | undefined>(\n  undefined,\n)\n\nexport default function ScrollSpyProvider({\n  children,\n  options = { threshold: 0.5 },\n}: ScrollSpyProviderProps) {\n  const [nodes, setNodes] = React.useState<ScrollItem[]>([])\n\n  // We want the IntersectionObserver inside a useRef because it will\n  // not trigger a rerender unlike useState\n  const { current: currentObserver } = React.useRef(\n    new window.IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // If the entry past the threshold, set it as the current node\n        if (entry.intersectionRatio > (options.threshold || 0.5)) {\n          // This may not work on older browsers, but pushState doesnt\n          // trigger a hashchange which would cause a jumping\n          window.history.pushState(null, '', `#${entry.target.id}`)\n          setNodes((nodes) =>\n            nodes.map((n) =>\n              n.id === entry.target.id\n                ? { ...n, isActive: true }\n                : { ...n, isActive: false },\n            ),\n          )\n        }\n      })\n    }, options),\n  )\n\n  // We need to seperate the state from the actions because we dont want\n  // addNode to update everytime currentNode or nodes updates\n  const state = React.useMemo(\n    () => ({\n      nodes,\n      // This tree implementation is a little complex, but it consolidate repeated\n      // topics and supports up to 2 levels of depth\n      sortedNodeTree: nodes.reduce((obj: any, item) => {\n        if (item.parent) {\n          const parentObj = obj[item.parent] || {}\n          const arr = parentObj[item.topic || 'unsorted'] || []\n          return {\n            ...obj,\n            [item.parent]: {\n              ...parentObj,\n              [item.topic || 'unsorted']: [...arr, item],\n            },\n          }\n        } else {\n          const arr = obj[item.topic || 'unsorted'] || []\n          return {\n            ...obj,\n            [item.topic || 'unsorted']: [...arr, item],\n          }\n        }\n      }, {}),\n    }),\n    [nodes],\n  )\n\n  // We memorize the state & actions to prevent occasional unnecessary rerenders\n  const actions = React.useMemo(\n    () => ({\n      // Because we can pass in a function as a 'ref' we can use this function\n      // to add the node to the observer 'tree'\n      addNode: (instance: HTMLDivElement | null): void => {\n        if (instance) {\n          currentObserver.observe(instance)\n\n          setNodes((prevNodes) => [\n            ...prevNodes,\n            {\n              title: getTitleFromAttributes(instance),\n              id: instance.id,\n              isActive: false,\n              topic: getTopicFromAttributes(instance),\n              parent: getTopicFromAttributes(instance, 'data-parent-topic'),\n            },\n          ])\n        }\n      },\n    }),\n    [currentObserver],\n  )\n\n  // Cleanup\n  React.useEffect(() => {\n    return () => currentObserver.disconnect()\n  }, [currentObserver])\n\n  return (\n    <ScrollSpyContext.Provider value={{ ...state, ...actions }}>\n      {children}\n    </ScrollSpyContext.Provider>\n  )\n}\n\nexport const useScrollSpy = () => {\n  const context = React.useContext(ScrollSpyContext)\n  if (!context) {\n    throw new Error('useScrollSpy must be used within the ScrollSpyProvider')\n  }\n\n  return context.addNode\n}\n\nexport const useScrollSpyState = () => {\n  const context = React.useContext(ScrollSpyContext)\n  if (!context) {\n    throw new Error(\n      'useScrollSpyState must be used within the ScrollSpyProvider',\n    )\n  }\n\n  return context\n}\n","import React from 'react'\nimport { useScrollSpy } from './ScrollSpyProvider'\n\ninterface ScrollSpyComponentProps\n  extends React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > {\n  children?: React.ReactNode\n  title: string\n  id: string\n  inheritedTopic?: string\n  parentTopic?: string\n}\n\nexport default function ScrollSpyComponent({\n  children,\n  title,\n  id,\n  inheritedTopic,\n  parentTopic,\n  ...rest\n}: ScrollSpyComponentProps) {\n  const ref = useScrollSpy()\n\n  // Because the IntersectionObserver passes back a DOM node, not a\n  // react one, we need to forward the data-title to pick back up in state\n  return (\n    <div\n      id={id}\n      ref={ref}\n      data-title={title}\n      data-topic={parentTopic ? inheritedTopic : undefined}\n      data-parent-topic={!parentTopic ? inheritedTopic : parentTopic}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface ScrollSpyComponentProps\n  extends React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > {\n  children?: React.ReactNode\n  title: string\n  id: string\n  inheritedTopic?: string\n  parentTopic?: string\n}\n\ninterface ScrollSpyTopicProps {\n  children?: React.ReactNode\n  topic: string\n  inheritedTopic?: string\n}\n\nexport default function ScrollSpyTopic({\n  children,\n  topic,\n  inheritedTopic\n}: ScrollSpyTopicProps) {\n  const childrenWithTopic = React.Children.map(children, (child) => {\n    if (!React.isValidElement<ScrollSpyComponentProps>(child)) {\n      return child\n    }\n    return React.cloneElement(child, {\n      inheritedTopic: topic,\n      parentTopic: inheritedTopic\n    })\n  })\n\n  return <div>{childrenWithTopic}</div>\n}\n"],"names":["getTitleFromAttributes","instance","attributes","getNamedItem","value","getTopicFromAttributes","attr","attribute","undefined","ScrollSpyContext","React","createContext","ScrollSpyProvider","children","options","threshold","useState","nodes","setNodes","useRef","window","IntersectionObserver","entries","forEach","entry","intersectionRatio","history","pushState","target","id","map","n","isActive","currentObserver","current","state","useMemo","sortedNodeTree","reduce","obj","item","parent","parentObj","arr","topic","actions","addNode","observe","prevNodes","title","useEffect","disconnect","Provider","useScrollSpy","context","useContext","Error","useScrollSpyState","ScrollSpyComponent","inheritedTopic","parentTopic","rest","ref","ScrollSpyTopic","childrenWithTopic","Children","child","isValidElement","cloneElement"],"mappings":"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"}