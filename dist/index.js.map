{"version":3,"file":"index.js","sources":["../src/components/ScrollSpyProvider.tsx","../src/components/Section.tsx","../src/components/Topic.tsx"],"sourcesContent":["import React from 'react'\n\ninterface ScrollSpyRef {\n  title: string\n  topic?: string\n  parentTopic?: string\n}\n\ninterface ScrollItem {\n  title: string\n  id: string\n  isActive: boolean\n  topic?: string\n  parent?: string\n}\n\ninterface Tree {\n  unsorted: ScrollItem[]\n  [key: string]: any\n}\n\ninterface ScrollSpyState {\n  nodes: ScrollItem[]\n  sortedNodeTree: Tree\n}\n\ninterface ScrollSpyProviderProps {\n  children?: React.ReactNode\n\n  // The threshold is a number from 0-1 indicating how much the child should be\n  // in view before becoming the current node\n  threshold?: number\n  options?: IntersectionObserverInit\n}\n\ninterface ScrollSpyActions {\n  addNode: (instance: HTMLDivElement | null, options: ScrollSpyRef) => void\n}\n\nconst ScrollSpyContext = React.createContext<ScrollSpyState | undefined>(\n  undefined\n)\n\nconst ScrollSpyActions = React.createContext<ScrollSpyActions | undefined>(\n  undefined\n)\n\nexport default function ScrollSpyProvider({\n  children,\n  options = { threshold: 0.5 }\n}: ScrollSpyProviderProps) {\n  const [nodes, setNodes] = React.useState<ScrollItem[]>([])\n\n  // We want the IntersectionObserver inside a useRef because it will\n  // not trigger a rerender unlike useState\n  const { current: currentObserver } = React.useRef(\n    new window.IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // If the entry past the threshold, set it as the current node\n        if (entry.intersectionRatio > (options.threshold || 0.5)) {\n          // This may not work on older browsers, but pushState doesnt\n          // trigger a hashchange which would cause a jumping\n          window.history.pushState(null, '', `#${entry.target.id}`)\n\n          // Update node that is currently past the threshold\n          setNodes((nodes) =>\n            nodes.map((n) =>\n              n.id === entry.target.id\n                ? { ...n, isActive: true }\n                : { ...n, isActive: false }\n            )\n          )\n        }\n      })\n    }, options)\n  )\n\n  // We need to seperate the state from the actions because we dont want\n  // addNode to update everytime currentNode or nodes updates\n  const state = React.useMemo(\n    () => ({\n      nodes,\n      // This tree implementation is a little complex, but it consolidate repeated\n      // topics and supports up to 2 levels of depth\n      sortedNodeTree: nodes.reduce((obj: any, item) => {\n        if (item.parent) {\n          const parentObj = obj[item.parent] || {}\n          const arr = parentObj[item.topic || 'unsorted'] || []\n          return {\n            ...obj,\n            [item.parent]: {\n              ...parentObj,\n              [item.topic || 'unsorted']: [...arr, item]\n            }\n          }\n        } else {\n          const arr = obj[item.topic || 'unsorted'] || []\n          return {\n            ...obj,\n            [item.topic || 'unsorted']: [...arr, item]\n          }\n        }\n      }, {})\n    }),\n    [nodes]\n  )\n\n  // We memorize the state & actions to prevent occasional unnecessary rerenders\n  const actions = React.useMemo(\n    () => ({\n      // Because we can pass in a function as a 'ref' we can use this function\n      // to add the node to the observer 'tree'\n      addNode: (\n        instance: HTMLDivElement | null,\n        { title, parentTopic, topic }: ScrollSpyRef\n      ): void => {\n        if (instance) {\n          currentObserver.observe(instance)\n\n          setNodes((nodes) => [\n            ...nodes,\n            {\n              title,\n              id: instance.id,\n              isActive: false,\n              topic: parentTopic ? topic : undefined,\n              parent: !parentTopic ? topic : parentTopic\n            }\n          ])\n        }\n      }\n    }),\n    [currentObserver]\n  )\n\n  // Cleanup\n  React.useEffect(() => {\n    return () => currentObserver.disconnect()\n  }, [currentObserver])\n\n  return (\n    <ScrollSpyContext.Provider value={state}>\n      <ScrollSpyActions.Provider value={actions}>\n        {children}\n      </ScrollSpyActions.Provider>\n    </ScrollSpyContext.Provider>\n  )\n}\n\nexport const useScrollSpy = () => {\n  const context = React.useContext(ScrollSpyActions)\n  if (!context) {\n    throw new Error('useScrollSpy must be used within the ScrollSpyProvider')\n  }\n\n  return context.addNode\n}\n\nexport const useScrollSpyState = () => {\n  const context = React.useContext(ScrollSpyContext)\n  if (!context) {\n    throw new Error(\n      'useScrollSpyState must be used within the ScrollSpyProvider'\n    )\n  }\n\n  return context\n}\n","import React from 'react'\nimport { useScrollSpy } from './ScrollSpyProvider'\n\ninterface ScrollSpyComponentProps\n  extends React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > {\n  children?: React.ReactNode\n  title: string\n  id: string\n  inheritedTopic?: string\n  parentTopic?: string\n}\n\nexport default function Section({\n  children,\n  title,\n  id,\n  inheritedTopic,\n  parentTopic,\n  ...rest\n}: ScrollSpyComponentProps) {\n  const addNode = useScrollSpy()\n\n  // Because the IntersectionObserver passes back a DOM node, not a\n  // react one, we need to forward the data-title to pick back up in state\n  return (\n    <div\n      id={id}\n      ref={(instance) =>\n        addNode(instance, {\n          title,\n          topic: inheritedTopic,\n          parentTopic: parentTopic\n        })\n      }\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface ScrollSpyComponentProps\n  extends React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > {\n  children?: React.ReactNode\n  title: string\n  id: string\n  inheritedTopic?: string\n  parentTopic?: string\n}\n\ninterface ScrollSpyTopicProps {\n  children?: React.ReactNode\n  name: string\n  inheritedTopic?: string\n}\n\nexport default function Topic({\n  children,\n  name,\n  inheritedTopic\n}: ScrollSpyTopicProps) {\n  const childrenWithTopic = React.Children.map(children, (child) => {\n    if (!React.isValidElement<ScrollSpyComponentProps>(child)) {\n      return child\n    }\n    return React.cloneElement(child, {\n      inheritedTopic: name,\n      parentTopic: inheritedTopic\n    })\n  })\n\n  return <div>{childrenWithTopic}</div>\n}\n"],"names":["ScrollSpyContext","React","createContext","undefined","ScrollSpyActions","ScrollSpyProvider","children","options","threshold","useState","nodes","setNodes","useRef","window","IntersectionObserver","entries","forEach","entry","intersectionRatio","history","pushState","target","id","map","n","isActive","currentObserver","current","state","useMemo","sortedNodeTree","reduce","obj","item","parent","parentObj","arr","topic","actions","addNode","instance","title","parentTopic","observe","useEffect","disconnect","Provider","value","useScrollSpy","context","useContext","Error","useScrollSpyState","Section","inheritedTopic","rest","ref","Topic","name","childrenWithTopic","Children","child","isValidElement","cloneElement"],"mappings":"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"}